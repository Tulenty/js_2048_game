{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = null){\n        this.board = initialState || this.generateEmptyBoard();\n        this.size = 4;\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    generateEmptyBoard() {\n        return Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let i = 0; i < 4; i++){\n            for(let j = 0; j < 4; j++)if (this.board[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        if (emptyCells.length > 0) {\n            const [x, y] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let row = 0; row < 4; row++){\n            const newRow = this.board[row].filter((cell)=>cell !== 0);\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] *= 2;\n                this.score += newRow[i];\n                newRow.splice(i + 1, 1);\n                newRow.push(0);\n            }\n            while(newRow.length < 4)newRow.push(0);\n            for(let col = 0; col < 4; col++)if (this.board[row][col] !== newRow[col]) {\n                moved = true;\n                break;\n            }\n            this.board[row] = newRow;\n        }\n        if (moved) this.addRandomTile();\n        this.checkGameOver();\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let row = 0; row < 4; row++){\n            const newRow = this.board[row].filter((cell)=>cell !== 0);\n            for(let i = newRow.length - 1; i > 0; i--)if (newRow[i] === newRow[i - 1]) {\n                newRow[i] *= 2;\n                this.score += newRow[i];\n                newRow.splice(i - 1, 1);\n                newRow.unshift(0);\n            }\n            while(newRow.length < 4)newRow.unshift(0);\n            for(let col = 0; col < 4; col++)if (this.board[row][col] !== newRow[col]) {\n                moved = true;\n                break;\n            }\n            this.board[row] = newRow;\n        }\n        if (moved) this.addRandomTile();\n        this.checkGameOver();\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let col = 0; col < 4; col++){\n            const newCol = [];\n            for(let row = 0; row < 4; row++)if (this.board[row][col] !== 0) newCol.push(this.board[row][col]);\n            for(let i = 0; i < newCol.length - 1; i++)if (newCol[i] === newCol[i + 1]) {\n                newCol[i] *= 2;\n                this.score += newCol[i];\n                newCol.splice(i + 1, 1);\n            }\n            while(newCol.length < 4)newCol.push(0);\n            for(let row = 0; row < 4; row++){\n                if (this.board[row][col] !== newCol[row]) moved = true;\n                this.board[row][col] = newCol[row];\n            }\n        }\n        if (moved) this.addRandomTile();\n        this.checkGameOver();\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let col = 0; col < 4; col++){\n            const newCol = [];\n            for(let row = 0; row < 4; row++)if (this.board[row][col] !== 0) newCol.push(this.board[row][col]);\n            for(let i = newCol.length - 1; i > 0; i--)if (newCol[i] === newCol[i - 1]) {\n                newCol[i] *= 2;\n                this.score += newCol[i];\n                newCol.splice(i - 1, 1);\n                newCol.unshift(0);\n            }\n            while(newCol.length < 4)newCol.unshift(0);\n            for(let row = 0; row < 4; row++){\n                if (this.board[row][col] !== newCol[row]) moved = true;\n                this.board[row][col] = newCol[row];\n            }\n        }\n        if (moved) this.addRandomTile();\n        this.checkGameOver();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * idle - the game has not started yet (the initial state);\n   * playing - the game is in progress;\n   * win - the game is won;\n   * lose - the game is lost\n   */ checkGameOver() {\n        if (this.isWin()) this.status = \"win\";\n        else if (this.isLose()) this.status = \"lose\";\n    }\n    isWin() {\n        for (const i of this.board){\n            if (i.includes(2048)) return true;\n        }\n        return false;\n    }\n    isLose() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (this.board[row][col] === 0) return false;\n            if (col < 3 && this.board[row][col] === this.board[row][col + 1]) return false;\n            if (row < 3 && this.board[row][col] === this.board[row + 1][col]) return false;\n        }\n        return true;\n    }\n    getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        if (this.status === \"idle\" || this.status === \"lose\" || this.status === \"win\") {\n            this.status = \"playing\";\n            this.addRandomTile();\n            this.addRandomTile();\n        }\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.score = 0;\n        this.status = \"idle\";\n        this.board = this.generateEmptyBoard();\n        this.start();\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$notification = document.querySelector(\".message-container\");\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\" || $09e991522ca7e64e$var$game.getStatus() === \"win\" || $09e991522ca7e64e$var$game.getStatus() === \"lose\") {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$notification.querySelector(\".message-win\").classList.add(\"hidden\");\n        $09e991522ca7e64e$var$notification.querySelector(\".message-lose\").classList.add(\"hidden\");\n    } else if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$notification.querySelector(\".message-start\").classList.add(\"hidden\");\n        $09e991522ca7e64e$var$startButton.textContent = \"restart\";\n    }\n    $09e991522ca7e64e$var$updateUI();\n});\nfunction $09e991522ca7e64e$var$updateUI() {\n    const cells = document.querySelectorAll(\".field-cell\");\n    const board = $09e991522ca7e64e$var$game.getState();\n    for(let row = 0; row < board.length; row++)for(let col = 0; col < board[row].length; col++){\n        const cell = cells[row * $09e991522ca7e64e$var$game.size + col];\n        cell.textContent = board[row][col] || \"\";\n        cell.className = `field-cell field-cell--${board[row][col] || \"empty\"}`;\n    }\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    if ($09e991522ca7e64e$var$game.isWin()) $09e991522ca7e64e$var$notification.querySelector(\".message-win\").classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.isLose()) $09e991522ca7e64e$var$notification.querySelector(\".message-lose\").classList.remove(\"hidden\");\n}\ndocument.addEventListener(\"keydown\", (e)=>{\n    if (e.key === \"ArrowLeft\") $09e991522ca7e64e$var$game.moveLeft();\n    if (e.key === \"ArrowRight\") $09e991522ca7e64e$var$game.moveRight();\n    if (e.key === \"ArrowUp\") $09e991522ca7e64e$var$game.moveUp();\n    if (e.key === \"ArrowDown\") $09e991522ca7e64e$var$game.moveDown();\n    $09e991522ca7e64e$var$updateUI();\n});\n\n\n//# sourceMappingURL=index.eb996563.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startButton = document.querySelector('.start');\nconst score = document.querySelector('.game-score');\nconst notification = document.querySelector('.message-container');\n\nstartButton.addEventListener('click', () => {\n  if (\n    game.getStatus() === 'playing' ||\n    game.getStatus() === 'win' ||\n    game.getStatus() === 'lose'\n  ) {\n    game.restart();\n    notification.querySelector('.message-win').classList.add('hidden');\n    notification.querySelector('.message-lose').classList.add('hidden');\n  } else if (game.getStatus() === 'idle') {\n    game.start();\n    notification.querySelector('.message-start').classList.add('hidden');\n    startButton.textContent = 'restart';\n  }\n  updateUI();\n});\n\nfunction updateUI() {\n  const cells = document.querySelectorAll('.field-cell');\n  const board = game.getState();\n\n  for (let row = 0; row < board.length; row++) {\n    for (let col = 0; col < board[row].length; col++) {\n      const cell = cells[row * game.size + col];\n\n      cell.textContent = board[row][col] || '';\n      cell.className = `field-cell field-cell--${board[row][col] || 'empty'}`;\n    }\n  }\n  score.textContent = game.getScore();\n\n  if (game.isWin()) {\n    notification.querySelector('.message-win').classList.remove('hidden');\n  } else if (game.isLose()) {\n    notification.querySelector('.message-lose').classList.remove('hidden');\n  }\n}\n\ndocument.addEventListener('keydown', (e) => {\n  if (e.key === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (e.key === 'ArrowRight') {\n    game.moveRight();\n  }\n\n  if (e.key === 'ArrowUp') {\n    game.moveUp();\n  }\n\n  if (e.key === 'ArrowDown') {\n    game.moveDown();\n  }\n\n  updateUI();\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = null) {\n    this.board = initialState || this.generateEmptyBoard();\n    this.size = 4;\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  generateEmptyBoard() {\n    return Array.from({ length: 4 }, () => Array(4).fill(0));\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const [x, y] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const newRow = this.board[row].filter((cell) => cell !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow.splice(i + 1, 1);\n          newRow.push(0);\n        }\n      }\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] !== newRow[col]) {\n          moved = true;\n          break;\n        }\n      }\n\n      this.board[row] = newRow;\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.checkGameOver();\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const newRow = this.board[row].filter((cell) => cell !== 0);\n\n      for (let i = newRow.length - 1; i > 0; i--) {\n        if (newRow[i] === newRow[i - 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow.splice(i - 1, 1);\n          newRow.unshift(0);\n        }\n      }\n\n      while (newRow.length < 4) {\n        newRow.unshift(0);\n      }\n\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] !== newRow[col]) {\n          moved = true;\n          break;\n        }\n      }\n\n      this.board[row] = newRow;\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.checkGameOver();\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const newCol = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      for (let i = 0; i < newCol.length - 1; i++) {\n        if (newCol[i] === newCol[i + 1]) {\n          newCol[i] *= 2;\n          this.score += newCol[i];\n          newCol.splice(i + 1, 1);\n        }\n      }\n\n      while (newCol.length < 4) {\n        newCol.push(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== newCol[row]) {\n          moved = true;\n        }\n        this.board[row][col] = newCol[row];\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.checkGameOver();\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const newCol = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      for (let i = newCol.length - 1; i > 0; i--) {\n        if (newCol[i] === newCol[i - 1]) {\n          newCol[i] *= 2;\n          this.score += newCol[i];\n          newCol.splice(i - 1, 1);\n          newCol.unshift(0);\n        }\n      }\n\n      while (newCol.length < 4) {\n        newCol.unshift(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== newCol[row]) {\n          moved = true;\n        }\n        this.board[row][col] = newCol[row];\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.checkGameOver();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * idle - the game has not started yet (the initial state);\n   * playing - the game is in progress;\n   * win - the game is won;\n   * lose - the game is lost\n   */\n\n  checkGameOver() {\n    if (this.isWin()) {\n      this.status = 'win';\n    } else if (this.isLose()) {\n      this.status = 'lose';\n    }\n  }\n\n  isWin() {\n    for (const i of this.board) {\n      if (i.includes(2048)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  isLose() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          return false;\n        }\n\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          return false;\n        }\n\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (\n      this.status === 'idle' ||\n      this.status === 'lose' ||\n      this.status === 'win'\n    ) {\n      this.status = 'playing';\n      this.addRandomTile();\n      this.addRandomTile();\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.score = 0;\n    this.status = 'idle';\n    this.board = this.generateEmptyBoard();\n    this.start();\n  }\n\n  // Add your own methods here\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","generateEmptyBoard","size","score","status","Array","from","length","fill","addRandomTile","emptyCells","i","j","push","x","y","Math","floor","random","moveLeft","moved","row","newRow","filter","cell","splice","col","checkGameOver","moveRight","unshift","moveUp","newCol","moveDown","getScore","getState","isWin","isLose","includes","getStatus","start","restart","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$notification","$09e991522ca7e64e$var$updateUI","cells","querySelectorAll","textContent","className","classList","remove","addEventListener","add","e","key"],"version":3,"file":"index.eb996563.js.map"}