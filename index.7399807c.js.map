{"mappings":"C,A,WUAA,SAAS,EAAqB,CAAG,CAAE,CAAG,EAC9B,CAAA,AAAO,MAAP,GAAe,EAAM,EAAI,MAAM,AAAN,GAAQ,CAAA,EAAM,EAAI,MAAM,AAAN,EAE/C,IAAK,IAAI,EAAI,EAAG,EAAO,AAAI,MAAM,GAAM,EAAI,EAAK,IAAK,CAAI,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CAErE,OAAO,CACX,CTHA,IAAM,EAAO,GCIb,CAAA,eEIoC,EFJ9B,SAAA,IAeQ,IAAA,EAAA,UAAA,MAAA,CAAA,GAAA,AAAA,KAAA,IAAA,SAAA,CAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAAe,MAfvB,ACPN,SAA2B,CAAQ,CAAE,CAAW,EAC5C,GAAI,CAAE,CAAA,aAAoB,CAAA,EAAc,MAAM,AAAI,UAAU,oCAChE,EDKM,IAAA,CAAA,GAgBF,IAAI,CAAC,KAAK,CAAG,GAAgB,IAAI,CAAC,kBAAkB,GACpD,IAAI,CAAC,IAAI,CAAG,EACZ,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,M,CAnBZ,OEI8B,EFJ9B,C,CAsBJ,IAAA,qBAAA,MAAA,WACE,OAAO,MAAM,IAAI,CAAC,CAAE,OAAQ,CAAE,EAAG,WAAM,MAAA,MAAM,CAAG,IAAI,CAAC,E,EACvD,C,E,CAEA,IAAA,gBAAA,MAAA,WAGE,IAAK,IAFC,EAAa,EAAE,CAEZ,EAAI,EAAG,EAAI,EAAG,IACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACI,IAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAClB,EAAW,IAAI,CAAC,CAAC,EAAG,EAAE,EAK5B,GAAI,EAAW,MAAM,CAAG,EAAG,CACzB,IGxCoB,EHwCL,EGvCV,ACNX,SAA2B,CAAG,EAC1B,GAAI,MAAM,OAAO,CAAC,GAAM,OAAO,CACnC,EDG0B,EHwCL,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,GGvCzC,AENrC,SAAkC,CAAG,CAAE,CAAC,EACpC,IAOI,EAAI,EAPJ,EAAK,AAAO,MAAP,EAAc,KAAO,AAAkB,aAAlB,OAAO,QAA0B,CAAG,CAAC,OAAO,QAAQ,CAAC,EAAI,CAAG,CAAC,aAAa,CAExG,GAAI,AAAM,MAAN,GAEJ,IAAI,EAAO,EAAE,CACT,EAAK,CAAA,EACL,EAAK,CAAA,EAGT,GAAI,CACA,IAAK,EAAK,EAAG,IAAI,CAAC,GAAM,CAAE,CAAA,EAAM,AAAA,CAAA,EAAK,EAAG,IAAI,EAAA,EAAI,IAAI,AAAJ,IAC5C,EAAK,IAAI,CAAC,EAAG,KAAK,EACT,ALgCyD,IKhCzD,EAAK,MAAM,EAF+B,EAAK,CAAA,GAIhE,CAAE,MAAO,EAAK,CACV,EAAK,CAAA,EACL,EAAK,CACT,QAAU,CACN,GAAI,CACK,GAAM,AAAgB,MAAhB,EAAG,MAAS,EAAU,EAAG,MAAS,EACjD,QAAU,CACN,GAAI,EAAI,MAAM,CAClB,CACJ,CAEA,OAAO,EACX,EFrB8D,EHuCgB,IGvCL,AIJzE,SAAwC,CAAC,CAAE,CAAM,EAC7C,GAAK,GACL,GAAI,AAAa,UAAb,OAAO,EAAgB,OAAO,AAAA,EAAqB,EPyCmB,GOvC1E,IAAI,EAAI,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,EAAG,IAGnD,GADU,WAAN,GAAkB,EAAE,WAAW,EAAE,CAAA,EAAI,EAAE,WAAW,CAAC,IAAI,AAAJ,EACnD,AAAM,QAAN,GAAe,AAAM,QAAN,EAAa,OAAO,MAAM,IAAI,CAAC,GAClD,GAAI,AAAM,cAAN,GAAqB,2CAA2C,IAAI,CAAC,GAAI,OAAO,AAAA,EAAqB,EPmC/B,GOlC9E,EJLwG,EHuC1B,IGvCqC,AGNnH,WACI,MAAM,AAAI,UAAU,4IACxB,IN2Ca,EAAQ,CAAA,CAAA,EAAA,CAAL,EAAK,CAAf,CAAA,EAAA,AAEA,CAAA,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CAC/C,CACF,C,E,CAEA,IAAA,WAAA,MAAA,W,I,E,I,CACE,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,EAMf,IAAK,IAFD,EAAQ,CAAA,EAEH,EAAM,EAAG,EAAM,EAAG,KAA3B,A,S,C,EAGE,IAAK,IAFC,EAAS,EAAK,KAAK,CAAC,EAAI,CAAC,MAAM,CAAC,SAAC,CAAvC,EAAgD,OAAA,AAAS,IAAT,C,GAEvC,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,EAAK,KAAK,EAAI,CAAM,CAAC,EAAE,CACvB,EAAO,MAAM,CAAC,EAAI,EAAG,GACrB,EAAO,IAAI,CAAC,IAIhB,KAAO,EAAO,MAAM,CAAG,GACrB,EAAO,IAAI,CAAC,GAGd,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,GAAI,EAAK,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,CAAM,CAAC,EAAI,CAAE,CACxC,EAAQ,CAAA,EACR,KACF,CAGF,EAAK,KAAK,CAAC,EAAI,CAAG,CACpB,EAxBA,GA0BI,GACF,IAAI,CAAC,aAAa,GAEpB,IAAI,CAAC,aAAa,GACpB,C,E,CAEA,IAAA,YAAA,MAAA,W,I,E,I,CACE,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,EAMf,IAAK,IAFD,EAAQ,CAAA,EAEH,EAAM,EAAG,EAAM,EAAG,KAA3B,A,S,C,EAGE,IAAK,IAFC,EAAS,EAAK,KAAK,CAAC,EAAI,CAAC,MAAM,CAAC,SAAC,CAAvC,EAAgD,OAAA,AAAS,IAAT,C,GAEvC,EAAI,EAAO,MAAM,CAAG,EAAG,EAAI,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,EAAK,KAAK,EAAI,CAAM,CAAC,EAAE,CACvB,EAAO,MAAM,CAAC,EAAI,EAAG,GACrB,EAAO,OAAO,CAAC,IAInB,KAAO,EAAO,MAAM,CAAG,GACrB,EAAO,OAAO,CAAC,GAGjB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,GAAI,EAAK,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,CAAM,CAAC,EAAI,CAAE,CACxC,EAAQ,CAAA,EACR,KACF,CAGF,EAAK,KAAK,CAAC,EAAI,CAAG,CACpB,EAxBA,GA0BI,GACF,IAAI,CAAC,aAAa,GAEpB,IAAI,CAAC,aAAa,GACpB,C,E,CAEA,IAAA,SAAA,MAAA,WACE,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,EAMf,IAAK,IAFD,EAAQ,CAAA,EAEH,EAAM,EAAG,EAAM,EAAG,IAAO,CAGhC,IAAK,IAFC,EAAS,EAAE,CAER,EAAM,EAAG,EAAM,EAAG,IACI,IAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EACtB,EAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EAIpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,IAAI,CAAC,KAAK,EAAI,CAAM,CAAC,EAAE,CACvB,EAAO,MAAM,CAAC,EAAI,EAAG,IAIzB,KAAO,EAAO,MAAM,CAAG,GACrB,EAAO,IAAI,CAAC,GAGd,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACrB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,CAAM,CAAC,EAAI,EACtC,CAAA,EAAQ,CAAA,CADV,EAGA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,CAAM,CAAC,EAAI,AAEtC,CAEI,GACF,IAAI,CAAC,aAAa,GAEpB,IAAI,CAAC,aAAa,GACpB,C,E,CAEA,IAAA,WAAA,MAAA,WACE,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,EAMf,IAAK,IAFD,EAAQ,CAAA,EAEH,EAAM,EAAG,EAAM,EAAG,IAAO,CAGhC,IAAK,IAFC,EAAS,EAAE,CAER,EAAM,EAAG,EAAM,EAAG,IACI,IAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EACtB,EAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EAIpC,IAAK,IAAI,EAAI,EAAO,MAAM,CAAG,EAAG,EAAI,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,IAAI,CAAC,KAAK,EAAI,CAAM,CAAC,EAAE,CACvB,EAAO,MAAM,CAAC,EAAI,EAAG,GACrB,EAAO,OAAO,CAAC,IAInB,KAAO,EAAO,MAAM,CAAG,GACrB,EAAO,OAAO,CAAC,GAGjB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACrB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,CAAM,CAAC,EAAI,EACtC,CAAA,EAAQ,CAAA,CADV,EAGA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,CAAM,CAAC,EAAI,AAEtC,CAEI,GACF,IAAI,CAAC,aAAa,GAEpB,IAAI,CAAC,aAAa,GACpB,C,E,CAKA,IAAA,WAAA,MAAA,WACE,OAAO,IAAI,CAAC,KAAK,AACnB,C,E,CAKA,IAAA,WAAA,MAAA,WACE,OAAO,IAAI,CAAC,KAAK,AACnB,C,E,CAaA,IAAA,gBAAA,MAAA,WACM,IAAI,CAAC,KAAK,GACZ,IAAI,CAAC,MAAM,CAAG,MACL,IAAI,CAAC,MAAM,IACpB,CAAA,IAAI,CAAC,MAAM,CAAG,MADT,CAGT,C,E,CAEA,IAAA,QAAA,MAAA,WACO,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAW,IAAI,CAAC,KAAK,CAAA,OAAA,QAAA,CAAA,GAArB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EACH,GAAI,AADD,EAAA,KAAA,CACG,QAAQ,CAAC,MACb,MAAO,CAAA,C,C,M,E,CAFN,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAML,MAAO,CAAA,CACT,C,E,CAEA,IAAA,SAAA,MAAA,WACE,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,GAA6B,IAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EAIpB,EAAM,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAM,EAAE,EAI5D,EAAM,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAM,EAAE,CAAC,EAAI,CAP9D,MAAO,CAAA,EAab,MAAO,CAAA,CACT,C,E,CAEA,IAAA,YAAA,MAAA,WACE,OAAO,IAAI,CAAC,MAAM,AACpB,C,E,CAKA,IAAA,QAAA,MAAA,WAEI,CAAA,AAAgB,SAAhB,IAAI,CAAC,MAAM,EACX,AAAgB,SAAhB,IAAI,CAAC,MAAM,EACX,AAAgB,QAAhB,IAAI,CAAC,MAAM,AAAK,IAEhB,IAAI,CAAC,MAAM,CAAG,UACd,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,aAAa,GAEtB,C,E,CAKA,IAAA,UAAA,MAAA,WACE,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,OACd,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,kBAAkB,GACpC,IAAI,CAAC,KAAK,EACZ,C,E,CEpSkB,AAZpB,SAA2B,CAAM,CAAE,CAAK,EACpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAAK,CACnC,IAAI,EAAa,CAAK,CAAC,EAAE,AACzB,CAAA,EAAW,UAAU,CAAG,EAAW,UAAU,EAAI,CAAA,EACjD,EAAW,YAAY,CAAG,CAAA,EAEtB,UAAW,GAAY,CAAA,EAAW,QAAQ,CAAG,CAAA,CAAjD,EAEA,OAAO,cAAc,CAAC,EAAQ,EAAW,GAAG,CAAE,EAClD,CACJ,EAEsC,AFLhC,EEK4C,SAAS,CAAE,GFLvD,C,G,EDFA,EAAc,SAAS,aAAa,CAAC,WACrC,EAAQ,SAAS,aAAa,CAAC,eAC/B,EAAe,SAAS,aAAa,CAAC,sBAqB5C,SAAS,IAIP,IAAK,IAHC,EAAQ,SAAS,gBAAgB,CAAC,eAClC,EAAQ,EAAK,QAAQ,GAElB,EAAM,EAAG,EAAM,EAAM,MAAM,CAAE,IACpC,IAAK,IAAI,EAAM,EAAG,EAAM,CAAK,CAAC,EAAI,CAAC,MAAM,CAAE,IAAO,CAChD,IAAM,EAAO,CAAK,CAAC,EAAM,EAAK,IAAI,CAAG,EAAI,AAEzC,CAAA,EAAK,WAAW,CAAG,CAAK,CAAC,EAAI,CAAC,EAAI,EAAI,GACtC,EAAK,SAAS,CAAG,0BAAqD,MAAA,CAA3B,CAAK,CAAC,EAAI,CAAC,EAAI,EAAI,QAChE,CAEF,EAAM,WAAW,CAAG,EAAK,QAAQ,GAE7B,EAAK,KAAK,GACZ,EAAa,aAAa,CAAC,gBAAgB,SAAS,CAAC,MAAM,CAAC,UACnD,EAAK,MAAM,IACpB,EAAa,aAAa,CAAC,iBAAiB,SAAS,CAAC,MAAM,CAAC,SAEjE,CAtCA,EAAY,gBAAgB,CAAC,QAAS,WAElC,AAAqB,YAArB,EAAK,SAAS,IACd,AAAqB,QAArB,EAAK,SAAS,IACd,AAAqB,SAArB,EAAK,SAAS,IAEd,EAAK,OAAO,GACZ,EAAa,aAAa,CAAC,gBAAgB,SAAS,CAAC,GAAG,CAAC,UACzD,EAAa,aAAa,CAAC,iBAAiB,SAAS,CAAC,GAAG,CAAC,WAC5B,SAArB,EAAK,SAAS,KACvB,EAAK,KAAK,GACV,EAAa,aAAa,CAAC,kBAAkB,SAAS,CAAC,GAAG,CAAC,UAC3D,EAAY,WAAW,CAAG,UAC1B,EAAY,SAAS,CAAC,MAAM,CAAC,SAC7B,EAAY,SAAS,CAAC,GAAG,CAAC,YAE5B,GACF,GAuBA,SAAS,gBAAgB,CAAC,UAAW,SAAC,CAAtC,EACgB,cAAV,EAAE,GAAG,EACP,EAAK,QAAQ,GAGD,eAAV,EAAE,GAAG,EACP,EAAK,SAAS,GAGF,YAAV,EAAE,GAAG,EACP,EAAK,MAAM,GAGC,cAAV,EAAE,GAAG,EACP,EAAK,QAAQ,GAGf,GACF,E","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $09cbfe85151ea6c6$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$71511d61b312f219(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $efec029548ccee7f$export$71511d61b312f219(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$71511d61b312f219)(arr) || (0, $8ca2848f896a6803$export$71511d61b312f219)(arr, i) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr, i) || (0, $a0bc1859061deae1$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.board = initialState || this.generateEmptyBoard();\n        this.size = 4;\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"generateEmptyBoard\",\n            value: function generateEmptyBoard() {\n                return Array.from({\n                    length: 4\n                }, function() {\n                    return Array(4).fill(0);\n                });\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var i = 0; i < 4; i++){\n                    for(var j = 0; j < 4; j++)if (this.board[i][j] === 0) emptyCells.push([\n                        i,\n                        j\n                    ]);\n                }\n                if (emptyCells.length > 0) {\n                    var _emptyCells_Math_floor = (0, $efec029548ccee7f$export$71511d61b312f219)(emptyCells[Math.floor(Math.random() * emptyCells.length)], 2), x = _emptyCells_Math_floor[0], y = _emptyCells_Math_floor[1];\n                    this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(row) {\n                    var newRow = _this.board[row].filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                        newRow[i] *= 2;\n                        _this.score += newRow[i];\n                        newRow.splice(i + 1, 1);\n                        newRow.push(0);\n                    }\n                    while(newRow.length < 4)newRow.push(0);\n                    for(var col = 0; col < 4; col++)if (_this.board[row][col] !== newRow[col]) {\n                        moved = true;\n                        break;\n                    }\n                    _this.board[row] = newRow;\n                };\n                if (this.status !== \"playing\") return;\n                var moved = false;\n                for(var row = 0; row < 4; row++)_loop(row);\n                if (moved) this.addRandomTile();\n                this.checkGameOver();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(row) {\n                    var newRow = _this.board[row].filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    for(var i = newRow.length - 1; i > 0; i--)if (newRow[i] === newRow[i - 1]) {\n                        newRow[i] *= 2;\n                        _this.score += newRow[i];\n                        newRow.splice(i - 1, 1);\n                        newRow.unshift(0);\n                    }\n                    while(newRow.length < 4)newRow.unshift(0);\n                    for(var col = 0; col < 4; col++)if (_this.board[row][col] !== newRow[col]) {\n                        moved = true;\n                        break;\n                    }\n                    _this.board[row] = newRow;\n                };\n                if (this.status !== \"playing\") return;\n                var moved = false;\n                for(var row = 0; row < 4; row++)_loop(row);\n                if (moved) this.addRandomTile();\n                this.checkGameOver();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (this.status !== \"playing\") return;\n                var moved = false;\n                for(var col = 0; col < 4; col++){\n                    var newCol = [];\n                    for(var row = 0; row < 4; row++)if (this.board[row][col] !== 0) newCol.push(this.board[row][col]);\n                    for(var i = 0; i < newCol.length - 1; i++)if (newCol[i] === newCol[i + 1]) {\n                        newCol[i] *= 2;\n                        this.score += newCol[i];\n                        newCol.splice(i + 1, 1);\n                    }\n                    while(newCol.length < 4)newCol.push(0);\n                    for(var row1 = 0; row1 < 4; row1++){\n                        if (this.board[row1][col] !== newCol[row1]) moved = true;\n                        this.board[row1][col] = newCol[row1];\n                    }\n                }\n                if (moved) this.addRandomTile();\n                this.checkGameOver();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (this.status !== \"playing\") return;\n                var moved = false;\n                for(var col = 0; col < 4; col++){\n                    var newCol = [];\n                    for(var row = 0; row < 4; row++)if (this.board[row][col] !== 0) newCol.push(this.board[row][col]);\n                    for(var i = newCol.length - 1; i > 0; i--)if (newCol[i] === newCol[i - 1]) {\n                        newCol[i] *= 2;\n                        this.score += newCol[i];\n                        newCol.splice(i - 1, 1);\n                        newCol.unshift(0);\n                    }\n                    while(newCol.length < 4)newCol.unshift(0);\n                    for(var row1 = 0; row1 < 4; row1++){\n                        if (this.board[row1][col] !== newCol[row1]) moved = true;\n                        this.board[row1][col] = newCol[row1];\n                    }\n                }\n                if (moved) this.addRandomTile();\n                this.checkGameOver();\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * idle - the game has not started yet (the initial state);\n   * playing - the game is in progress;\n   * win - the game is won;\n   * lose - the game is lost\n   */ key: \"checkGameOver\",\n            value: function checkGameOver() {\n                if (this.isWin()) this.status = \"win\";\n                else if (this.isLose()) this.status = \"lose\";\n            }\n        },\n        {\n            key: \"isWin\",\n            value: function isWin() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.board[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var i = _step.value;\n                        if (i.includes(2048)) return true;\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                return false;\n            }\n        },\n        {\n            key: \"isLose\",\n            value: function isLose() {\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    if (this.board[row][col] === 0) return false;\n                    if (col < 3 && this.board[row][col] === this.board[row][col + 1]) return false;\n                    if (row < 3 && this.board[row][col] === this.board[row + 1][col]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                if (this.status === \"idle\" || this.status === \"lose\" || this.status === \"win\") {\n                    this.status = \"playing\";\n                    this.addRandomTile();\n                    this.addRandomTile();\n                }\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.score = 0;\n                this.status = \"idle\";\n                this.board = this.generateEmptyBoard();\n                this.start();\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$startButton = document.querySelector(\".button\");\nvar $197cd56b15c33885$var$score = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$notification = document.querySelector(\".message-container\");\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$game.getStatus() === \"playing\" || $197cd56b15c33885$var$game.getStatus() === \"win\" || $197cd56b15c33885$var$game.getStatus() === \"lose\") {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$notification.querySelector(\".message-win\").classList.add(\"hidden\");\n        $197cd56b15c33885$var$notification.querySelector(\".message-lose\").classList.add(\"hidden\");\n    } else if ($197cd56b15c33885$var$game.getStatus() === \"idle\") {\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$notification.querySelector(\".message-start\").classList.add(\"hidden\");\n        $197cd56b15c33885$var$startButton.textContent = \"Restart\";\n        $197cd56b15c33885$var$startButton.classList.remove(\"start\");\n        $197cd56b15c33885$var$startButton.classList.add(\"restart\");\n    }\n    $197cd56b15c33885$var$updateUI();\n});\nfunction $197cd56b15c33885$var$updateUI() {\n    var cells = document.querySelectorAll(\".field-cell\");\n    var board = $197cd56b15c33885$var$game.getState();\n    for(var row = 0; row < board.length; row++)for(var col = 0; col < board[row].length; col++){\n        var cell = cells[row * $197cd56b15c33885$var$game.size + col];\n        cell.textContent = board[row][col] || \"\";\n        cell.className = \"field-cell field-cell--\".concat(board[row][col] || \"empty\");\n    }\n    $197cd56b15c33885$var$score.textContent = $197cd56b15c33885$var$game.getScore();\n    if ($197cd56b15c33885$var$game.isWin()) $197cd56b15c33885$var$notification.querySelector(\".message-win\").classList.remove(\"hidden\");\n    else if ($197cd56b15c33885$var$game.isLose()) $197cd56b15c33885$var$notification.querySelector(\".message-lose\").classList.remove(\"hidden\");\n}\ndocument.addEventListener(\"keydown\", function(e) {\n    if (e.key === \"ArrowLeft\") $197cd56b15c33885$var$game.moveLeft();\n    if (e.key === \"ArrowRight\") $197cd56b15c33885$var$game.moveRight();\n    if (e.key === \"ArrowUp\") $197cd56b15c33885$var$game.moveUp();\n    if (e.key === \"ArrowDown\") $197cd56b15c33885$var$game.moveDown();\n    $197cd56b15c33885$var$updateUI();\n});\n\n})();\n//# sourceMappingURL=index.7399807c.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startButton = document.querySelector('.button');\nconst score = document.querySelector('.game-score');\nconst notification = document.querySelector('.message-container');\n\nstartButton.addEventListener('click', () => {\n  if (\n    game.getStatus() === 'playing' ||\n    game.getStatus() === 'win' ||\n    game.getStatus() === 'lose'\n  ) {\n    game.restart();\n    notification.querySelector('.message-win').classList.add('hidden');\n    notification.querySelector('.message-lose').classList.add('hidden');\n  } else if (game.getStatus() === 'idle') {\n    game.start();\n    notification.querySelector('.message-start').classList.add('hidden');\n    startButton.textContent = 'Restart';\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n  }\n  updateUI();\n});\n\nfunction updateUI() {\n  const cells = document.querySelectorAll('.field-cell');\n  const board = game.getState();\n\n  for (let row = 0; row < board.length; row++) {\n    for (let col = 0; col < board[row].length; col++) {\n      const cell = cells[row * game.size + col];\n\n      cell.textContent = board[row][col] || '';\n      cell.className = `field-cell field-cell--${board[row][col] || 'empty'}`;\n    }\n  }\n  score.textContent = game.getScore();\n\n  if (game.isWin()) {\n    notification.querySelector('.message-win').classList.remove('hidden');\n  } else if (game.isLose()) {\n    notification.querySelector('.message-lose').classList.remove('hidden');\n  }\n}\n\ndocument.addEventListener('keydown', (e) => {\n  if (e.key === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (e.key === 'ArrowRight') {\n    game.moveRight();\n  }\n\n  if (e.key === 'ArrowUp') {\n    game.moveUp();\n  }\n\n  if (e.key === 'ArrowDown') {\n    game.moveDown();\n  }\n\n  updateUI();\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = null) {\n    this.board = initialState || this.generateEmptyBoard();\n    this.size = 4;\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  generateEmptyBoard() {\n    return Array.from({ length: 4 }, () => Array(4).fill(0));\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const [x, y] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const newRow = this.board[row].filter((cell) => cell !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow.splice(i + 1, 1);\n          newRow.push(0);\n        }\n      }\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] !== newRow[col]) {\n          moved = true;\n          break;\n        }\n      }\n\n      this.board[row] = newRow;\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.checkGameOver();\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const newRow = this.board[row].filter((cell) => cell !== 0);\n\n      for (let i = newRow.length - 1; i > 0; i--) {\n        if (newRow[i] === newRow[i - 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow.splice(i - 1, 1);\n          newRow.unshift(0);\n        }\n      }\n\n      while (newRow.length < 4) {\n        newRow.unshift(0);\n      }\n\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] !== newRow[col]) {\n          moved = true;\n          break;\n        }\n      }\n\n      this.board[row] = newRow;\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.checkGameOver();\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const newCol = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      for (let i = 0; i < newCol.length - 1; i++) {\n        if (newCol[i] === newCol[i + 1]) {\n          newCol[i] *= 2;\n          this.score += newCol[i];\n          newCol.splice(i + 1, 1);\n        }\n      }\n\n      while (newCol.length < 4) {\n        newCol.push(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== newCol[row]) {\n          moved = true;\n        }\n        this.board[row][col] = newCol[row];\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.checkGameOver();\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const newCol = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      for (let i = newCol.length - 1; i > 0; i--) {\n        if (newCol[i] === newCol[i - 1]) {\n          newCol[i] *= 2;\n          this.score += newCol[i];\n          newCol.splice(i - 1, 1);\n          newCol.unshift(0);\n        }\n      }\n\n      while (newCol.length < 4) {\n        newCol.unshift(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== newCol[row]) {\n          moved = true;\n        }\n        this.board[row][col] = newCol[row];\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.checkGameOver();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * idle - the game has not started yet (the initial state);\n   * playing - the game is in progress;\n   * win - the game is won;\n   * lose - the game is lost\n   */\n\n  checkGameOver() {\n    if (this.isWin()) {\n      this.status = 'win';\n    } else if (this.isLose()) {\n      this.status = 'lose';\n    }\n  }\n\n  isWin() {\n    for (const i of this.board) {\n      if (i.includes(2048)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  isLose() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          return false;\n        }\n\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          return false;\n        }\n\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (\n      this.status === 'idle' ||\n      this.status === 'lose' ||\n      this.status === 'win'\n    ) {\n      this.status = 'playing';\n      this.addRandomTile();\n      this.addRandomTile();\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.score = 0;\n    this.status = 'idle';\n    this.board = this.generateEmptyBoard();\n    this.start();\n  }\n\n  // Add your own methods here\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_with_holes } from \"./_array_with_holes.js\";\nimport { _ as _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _ as _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","instance","Constructor","TypeError","board","generateEmptyBoard","size","score","status","key","value","from","fill","emptyCells","j","push","_emptyCells_Math_floor","isArray","Math","floor","random","_s","_e","_i","Symbol","iterator","_arr","_n","_d","call","next","done","err","o","minLen","n","Object","prototype","toString","slice","constructor","name","test","x","y","_this","moved","row","_loop","newRow","filter","cell","splice","col","addRandomTile","checkGameOver","unshift","newCol","row1","isWin","isLose","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","includes","return","start","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$startButton","document","querySelector","$197cd56b15c33885$var$score","$197cd56b15c33885$var$notification","$197cd56b15c33885$var$updateUI","cells","querySelectorAll","getState","textContent","className","concat","getScore","classList","remove","addEventListener","getStatus","restart","add","e","moveLeft","moveRight","moveUp","moveDown"],"version":3,"file":"index.7399807c.js.map"}